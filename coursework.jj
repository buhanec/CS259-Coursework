PARSER_BEGIN(CS259Parser)
import java.util.*;

public class CS259Parser {
    public static void main(String[] args) {
        CS259Parser parser = new CS259Parser(System.in);
        try {
            parser.Program();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

interface Evalable {
    int eval(int arg) throws Exception;
}

class Function implements Evalable {
    public final String name;
    public final String argument;
    public final Evalable expr;

    public Function(String name, String argument, Evalable expr) {
        this.name = name;
        this.argument = argument;
        this.expr = expr;
    }

    public int eval(int arg) {
        return 0;
    }

    public String toString() {
        return name+"("+argument+"):="+expr;
    }
}

class Number implements Evalable {
    public final int value;

    public Number(String value) {
        this.value = Integer.parseInt(value);
    }
    public Number(int value) {
        this.value = value;
    }

    public int eval(int arg) {
        return this.value;
    }

    public String toString() {
        return Integer.toString(this.value);
    }
}

class Argument implements Evalable {
    public final String name;

    public Argument(String name) {
        this.name = name;
    }

    public int eval(int arg) throws Exception {
        if (name == Functions.current.argument) {
            throw new Exception("Incorrect argument name \""+name+"\" for function \""+Functions.current.name+"\" (expected \""+Functions.current.argument+"\")");
        }
        return arg;
    }

    public String toString() {
        return this.name;
    }
}

class Call implements Evalable {
    public final String function;
    public final Evalable argument;

    public Call(String function, Evalable argument) {
        this.function = function;
        this.argument = argument;
    }

    public int eval(int arg) throws Exception {
        return Functions.table.get(function).eval(arg);
    }

    public String toString() {
        return function+"("+argument+")";
    }
}

class Product implements Evalable {
    public final Evalable factor1;
    public final Evalable factor2;

    public Product(Evalable factor1, Evalable factor2) {
        this.factor1 = factor1;
        this.factor2 = factor2;
    }

    public int eval(int arg) throws Exception {
        return factor1.eval(arg)*factor2.eval(arg);
    }

    public String toString() {
        return "("+factor1+"*"+factor2+")";
    }
}

class Sum implements Evalable {
    public final Evalable summand1;
    public final Evalable summand2;

    public Sum(Evalable summand1, Evalable summand2) {
        this.summand1 = summand1;
        this.summand2 = summand2;
    }

    public int eval(int arg) throws Exception {
        return summand1.eval(arg)+summand2.eval(arg);
    }

    public String toString() {
        return "("+summand1+"+"+summand2+")";
    }
}

class Functions {
    public static HashMap<String, Function> table = new HashMap<String, Function>();
    public static HashSet<String> calls = new HashSet<String>();
    public static Function current = null;
}

PARSER_END(CS259Parser)

/** Tokens */
TOKEN :
{
        < EOL   : ";" ( "\r" | "\n" | "\r\n" ) >
    |   < DEF   : "DEF" >
    |   < MAIN  : "MAIN" >
    |   < FUNC  : ( <UPPER> )+ >
    |   < ARG   : ( <LOWER> )+ >
    |   < NUM   : ( <DIGIT> )+ >
    |   < PLUS  : "+" >
    |   < TIMES : "*" >
    |   < LPAR  : "(" >
    |   < RPAR  : ")" >
    |   < LANG  : "{" >
    |   < RANG  : "}" >
    |   < S     : " " >
}
TOKEN :
{
        < #DIGIT : ["0"-"9"] >
    |   < #UPPER : ["A"-"Z"] >
    |   < #LOWER : ["a"-"z"] >
}

void Program() : { Function f; }
{
    ( f = Def() { Functions.table.put(f.name, f); }
    )* <EOF> {
        for (String n: Functions.table.keySet()) {
            String fn = Functions.table.get(n).toString();
            System.out.println(fn);
        }
        System.out.println("Done");
    }
}

Function Def() : { Token f, a = null; Evalable e; }
{
    <DEF> <S> ( ( f = <MAIN> ) | ( f = <FUNC> <S> a = <ARG> ) ) <S> <LANG> <S> e = Sums() <S> <RANG> <S> <EOL>
    {
        if (a != null) {
            if (f.image != "MAIN") {
                return new Function(f.image, a.image, e);
            } else {
                throw new ParseException("Incorrect MAIN definition.");
            }
        }
        return new Function(f.image, null, e);
    }
}

Evalable Nullnary() : { Token f; Evalable e; }
{
        <NUM> { return new Number(token.image); }
    |   <ARG> { return new Argument(token.image); }
    |   f = <FUNC> <LPAR> e = Sums() <RPAR> { return new Call(f.image, e); }
}

Evalable CreateProduct(Evalable p) : { Evalable f; }
{
    ( <TIMES> f = Nullnary() { p = new Product(p, f); }
    )* { return p; }
}

Evalable Products() : { Evalable e; }
{
    e = Nullnary() e = CreateProduct(e) { return e; }
}

Evalable CreateSum(Evalable s) : { Evalable e; }
{
    ( <PLUS> e = Products() { s = new Sum(s, e); }
    )* { return s; }
}

Evalable Sums() : { Evalable e; }
{
    e = Products() e = CreateSum(e) { return e; }
}
