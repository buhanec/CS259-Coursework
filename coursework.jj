PARSER_BEGIN(CS259Parser)
import java.util.*;

public class CS259Parser {
    public static void main(String[] args) throws EvalException {
        CS259Parser parser = new CS259Parser(System.in);
        try {
            parser.Program();
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (String n: Functions.table.keySet()) {
            String fn = Functions.table.get(n).toString();
            System.out.println(fn);
        }

        System.out.println(Functions.table.get("MAIN").eval(new int[0]));

    }
}



/**
 * Exception raised during evaluation.
 */
class EvalException extends Exception {
    public EvalException() {
        super();
    }
    public EvalException(String message) {
        super(message);
    }
}

/**
 * Interface that needs to be implemented by all the elements of an expression.
 */
interface Evalable {
    public int eval(HashMap<String, Integer> args) throws EvalException;
}

/**
 * Represents a function that can be called with an array of numeric arguments.
 */
class Function {
    public final String name;
    public final String[] args;
    public final Evalable expr;

    public Function(String name, String[] args, Evalable expr) {
        this.name = name;
        this.args = args;
        this.expr = expr;
    }

    public int eval(int[] args) throws EvalException {
        if (args.length != this.args.length) {
            throw new EvalException("Incorrect number of arguments.");
        }
        HashMap<String, Integer> nargs = new HashMap<String, Integer>();
        for (int i = 0; i < args.length; i++) {
            nargs.put(this.args[i], args[i]);
        }
        return expr.eval(nargs);
    }

    public String toString() {
        String r = name+"(";
        for (int i = 0; i < args.length; i++) {
            if (i == args.length-1) {
                r += args[i];
            } else {
                r += args[i]+",";
            }
        }
        return r+"):="+expr;
    }
}

/**
 * Represents an (unsigned) integer.
 */
class Number implements Evalable {
    public final int value;

    public Number(String value) {
        this.value = Integer.parseInt(value);
    }
    public Number(int value) {
        this.value = value;
    }

    public int eval(HashMap<String, Integer> args) {
        return value;
    }

    public String toString() {
        return Integer.toString(value);
    }
}

/**
 * Represents a variable/argument.
 */
class Argument implements Evalable {
    public final String name;

    public Argument(String name) {
        this.name = name;
    }

    public int eval(HashMap<String, Integer> args) {
        return args.get(name);
    }

    public String toString() {
        return name;
    }
}

/**
 * Represents a call to a function.
 */
class Call implements Evalable {
    public final String function;
    public final Evalable[] args;

    public Call(String function, Evalable[] args) {
        this.function = function;
        this.args = args;
    }

    public int eval(HashMap<String, Integer> args) throws EvalException {
        int[] iargs = new int[this.args.length];
        for (int i = 0; i < iargs.length; i++) {
            iargs[i] = this.args[i].eval(args);
        }
        return Functions.table.get(function).eval(iargs);
    }

    public String toString() {
        String r = function+"(";
        for (int i = 0; i < args.length; i++) {
            if (i == args.length-1) {
                r += args[i];
            } else {
                r += args[i]+",";
            }
        }
        return r+")";
    }
}

/**
 * Represents a product.
 */
class Product implements Evalable {
    public final Evalable factor1;
    public final Evalable factor2;

    public Product(Evalable factor1, Evalable factor2) {
        this.factor1 = factor1;
        this.factor2 = factor2;
    }

    public int eval(HashMap<String, Integer> args) throws EvalException {
        return factor1.eval(args)*factor2.eval(args);
    }

    public String toString() {
        return "("+factor1+"*"+factor2+")";
    }
}

/**
 * Represents a sum.
 */
class Sum implements Evalable {
    public final Evalable summand1;
    public final Evalable summand2;

    public Sum(Evalable summand1, Evalable summand2) {
        this.summand1 = summand1;
        this.summand2 = summand2;
    }

    public int eval(HashMap<String, Integer> args) throws EvalException {
        return summand1.eval(args)+summand2.eval(args);
    }

    public String toString() {
        return "("+summand1+"+"+summand2+")";
    }
}

/**
 * Class that stores data required for evaluation.
 */
class Functions {
    public static HashMap<String, Function> table = new HashMap<String, Function>();
    public static HashSet<String> calls = new HashSet<String>();
    public static Function current = null;
}

PARSER_END(CS259Parser)

/**
 * Tokens
 */
// TODO: smallest to largest for performance
TOKEN :
{
        < EOL   : ";" ( "\r" | "\n" | "\r\n" ) >
    |   < DEF   : "DEF" >
    |   < MAIN  : "MAIN" >
    |   < FUNC  : ( <UPPER> )+ >
    |   < ARG   : ( <LOWER> )+ >
    |   < NUM   : ( <DIGIT> )+ >
    |   < PLUS  : "+" >
    |   < TIMES : "*" >
    |   < LPAR  : "(" >
    |   < RPAR  : ")" >
    |   < LANG  : "{" >
    |   < RANG  : "}" >
    |   < S     : " " >
}
TOKEN :
{
        < #DIGIT : ["0"-"9"] >
    |   < #UPPER : ["A"-"Z"] >
    |   < #LOWER : ["a"-"z"] >
}

void Program() : { Function f; }
{
    ( f = Def() { Functions.table.put(f.name, f); }
    )* <EOF> {}
}

Function Def() : { Token f, a = null; Evalable e; }
{
    <DEF> <S> ( ( f = <MAIN> ) | ( f = <FUNC> <S> a = <ARG> ) ) <S> <LANG> <S> e = Sums(a) <S> <RANG> <S> <EOL>
    {
        return new Function(f.image, (a == null ? new String[0] : new String[] {a.image}), e);
    }
}

Evalable Nullnary(Token a) : { Token f; Evalable e; }
{
        <NUM> { return new Number(token.image); }
    |   <ARG> {
            if (!token.image.equals(a.image)) {
                throw new ParseException("Incorrect argument \"" + token.image + "\" (expected \"" + a.image + "\") at line " + token.beginLine + ", column " + token.beginColumn + ".");
            }
            return new Argument(token.image);
        }
    |   f = <FUNC> <LPAR> e = Sums(a) <RPAR> { return new Call(f.image, new Evalable[] {e}); }
}

Evalable CreateProduct(Token a, Evalable p) : { Evalable f; }
{
    ( <TIMES> f = Nullnary(a) { p = new Product(p, f); }
    )* { return p; }
}

Evalable Products(Token a) : { Evalable e; }
{
    e = Nullnary(a) e = CreateProduct(a, e) { return e; }
}

Evalable CreateSum(Token a, Evalable s) : { Evalable e; }
{
    ( <PLUS> e = Products(a) { s = new Sum(s, e); }
    )* { return s; }
}

Evalable Sums(Token a) : { Evalable e; }
{
    e = Products(a) e = CreateSum(a, e) { return e; }
}
